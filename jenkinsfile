pipeline {
  agent { label 'build' }

  environment {
    registry = "saadkhan0/yourapp"
    registryCredential = 'dockerhub'
    DJANGO_SETTINGS_MODULE = 'backend.settings'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', credentialsId: 'gitcreds', url: 'https://github.com/Roughkingsir/forlaw-dops.git'
      }
    }

    stage('Install Dependencies') {
      steps {
        echo "Installing system dependencies..."
        sh '''
          set -e
          which python3 || sudo apt install python3 -y
          which pip3 || sudo apt install python3-pip -y

          which node || sudo apt install -y nodejs npm

          if ! command -v docker &> /dev/null
          then
            echo "Docker could not be found. Installing..."
            sudo apt-get update
            sudo apt-get install -y docker.io
          fi

          if ! command -v sonar-scanner &> /dev/null
          then
            echo "SonarScanner could not be found. Installing..."
            sudo apt-get update
            sudo apt-get install -y wget unzip
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-4.6.2.2472-linux.zip
            unzip sonar-scanner-4.6.2.2472-linux.zip
            sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
            echo 'export PATH=$PATH:/opt/sonar-scanner/bin' >> ~/.bashrc
            source ~/.bashrc || true
          fi

          which bandit || sudo pip3 install bandit
          which coverage || sudo pip3 install coverage
          which safety || sudo pip3 install safety

          if ! command -v trivy &> /dev/null
          then
            echo "Trivy could not be found. Installing..."
            sudo apt-get update
            sudo apt-get install -y curl
            curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.26.0/trivy_0.26.0_Linux-64bit.deb -o trivy.deb
            sudo dpkg -i trivy.deb || sudo apt-get install -f -y
          fi

          pip3 install -r backend/requirements.txt
          cd frontend && npm install
        '''
      }
    }

    stage('Run Tests & Coverage (Backend)') {
      steps {
        echo "Running Django Tests with Coverage"
        sh "cd backend && python3 -m coverage run manage.py test && python3 -m coverage report && python3 -m coverage xml"
      }
    }

    stage('Run Tests (Frontend)') {
      steps {
        echo "Running React Tests"
        sh "cd frontend && npm test -- --watchAll=false"
      }
    }

    stage('SCA & SAST') {
      steps {
        echo "Running Security Scans with Bandit and Safety"
        sh "bandit -r backend"
        sh "safety check --file=backend/requirements.txt"
      }
    }

    stage('SonarQube Analysis') {
      steps {
        echo "Running SonarQube for Python and JS"
        withSonarQubeEnv('mysonar') {
          sh "/opt/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=forlaw-dops \
                           -Dsonar.sources=backend,frontend \
                           -Dsonar.python.coverage.reportPaths=backend/coverage.xml"
        }
      }
    }

    stage('Quality Gates') {
      steps {
        echo "Checking Quality Gate"
        script {
          timeout(time: 1, unit: 'MINUTES') {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') {
              error "Pipeline failed due to quality gate: ${qg.status}"
            }
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "Building Docker Image"
        script {
          docker.withRegistry('', registryCredential) {
            def myImage = docker.build(registry, "-f dockerfile .")
            myImage.push()
          }
        }
      }
    }

    stage('Scan Docker Image') {
      steps {
        echo "Scanning Docker Image with Trivy"
        sh "trivy image --scanners vuln --offline-scan ${registry}:latest > trivyresults.txt"
      }
    }

    stage('Smoke Test Docker Image') {
      steps {
        echo "Running Smoke Test"
        sh "docker run -d --name smokerun -p 8000:8000 ${registry}"
        sh "sleep 30; curl -f http://localhost:8000 || exit 1"
        sh "docker rm --force smokerun"
      }
    }
  }
}
